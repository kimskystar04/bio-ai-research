# 난수 생성, 시드 고정, 분포별 샘플
import numpy as np

# -------------------------------
# 1. 시드 고정
# -------------------------------
np.random.seed(42)  # 동일한 결과 재현을 위한 설정

# -------------------------------
# 2. 기본 난수 생성기
# -------------------------------

# 0~1 사이 균등분포
uniform = np.random.rand(5)
print("균등분포 [0,1):", uniform)

# 평균 0, 표준편차 1인 정규분포 (가우시안)
normal = np.random.randn(5)
print("정규분포 N(0,1):", normal)

# 정수 난수: [low, high)
randint = np.random.randint(1, 10, size=5)
print("정수 난수 [1,10):", randint)

# -------------------------------
# 3. 원하는 정규분포 N(μ, σ²)
# -------------------------------
mu, sigma = 100, 15
normal_scaled = np.random.normal(loc=mu, scale=sigma, size=10)
print(f"정규분포 N({mu},{sigma**2}):", normal_scaled)

# -------------------------------
# 4. 이항분포 시뮬레이션
# -------------------------------
# 10번 시행, 성공확률 0.3 → 시행 1000번
binomial_sample = np.random.binomial(n=10, p=0.3, size=1000)
print("이항분포 샘플 (n=10, p=0.3): 평균 =", np.mean(binomial_sample))

# -------------------------------
# 5. 기타 분포 (옵션)
# -------------------------------
# 정수 카테고리 중 하나를 선택
category = np.random.choice(['A', 'B', 'C'], size=10, p=[0.2, 0.5, 0.3])
print("카테고리 선택 (choice):", category)

# -------------------------------
# 요약
# -------------------------------

'''
넘파이의 난수 생성기는 다음과 같은 분포를 지원한다:

- np.random.rand(): [0,1) 균등분포
- np.random.randn(): N(0,1) 정규분포
- np.random.randint(): 정수 균등분포
- np.random.normal(): 정규분포 N(μ,σ²)
- np.random.binomial(): 이항분포
- np.random.choice(): 범주형 데이터 샘플링

실험 반복에 일관성 유지 → np.random.seed()
!weight나 난수 shuffle 고정!
난수의 출발점을 지정하는 함수다.
같은 시드로 시작하면 항상 같은 난수 시퀀스가 나온다.
→ 실험 재현, 테스트 검증, 논문 코드 공개에 필수.(똑같은 시드로 해야ㅑ 난수가 동일한 
무작위성(?)으로 생성되어 논문에서 나온거 그대로 재현가능)
이걸로 정규분포 기반 시뮬레이션, 분류 샘플, 확률적 실험까지 구현 가능.
'''
